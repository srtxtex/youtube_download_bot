import os
import re
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from background import keep_alive  # –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–±–æ—Ç—ã Flask

YOUTUBE_REGEX = r'(https?://(?:www\.)?(?:youtube\.com/(?:watch\?v=|shorts/)|youtu\.be/)[a-zA-Z0-9_\-]+(?:\?[a-zA-Z0-9_\-&=]*)?)'

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç
    if update.message is None or update.message.text is None:
        return
    
    # –ò—â–µ–º YouTube —Å—Å—ã–ª–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    matches = re.findall(YOUTUBE_REGEX, update.message.text)
    if matches:
        url = matches[0]
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        chat_type = update.message.chat.type
        username = "Unknown"
        if update.message.from_user:
            username = update.message.from_user.username if update.message.from_user.username else update.message.from_user.first_name
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–∏–¥–µ–æ
        is_shorts = is_youtube_shorts(url)
        video_type = "Shorts" if is_shorts else "–≤–∏–¥–µ–æ"
        emoji = "üé¨" if is_shorts else "üé•"
        
        print(f"YouTube {video_type} –Ω–∞–π–¥–µ–Ω–æ –≤ {chat_type} –æ—Ç {username}: {url}")
        
        msg = await update.message.reply_text(f"{emoji} –°–∫–∞—á–∏–≤–∞—é {video_type}, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        video_path = download_youtube_video(url)
        
        if video_path:
            with open(video_path, 'rb') as video_file:
                await context.bot.send_video(
                    chat_id=update.message.chat_id,
                    video=video_file,
                    caption=f'üé¨ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ –¥–ª—è @{username}'
                )
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(video_path)
            print(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat_type}")
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ..."
        await msg.delete()

def is_youtube_shorts(url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL —Å—Å—ã–ª–∫–æ–π –Ω–∞ YouTube Shorts"""
    return '/shorts/' in url.lower()

def select_best_format(formats):
    """–í—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º: 480p -> –≤—ã—à–µ -> –Ω–∏–∂–µ"""
    if not formats:
        return None
    
    # –†–∞–∑–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –Ω–∞ –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ
    video_formats = []
    audio_formats = []
    combined_formats = []
    
    for fmt in formats:
        if fmt.get('vcodec') != 'none' and fmt.get('acodec') != 'none':
            combined_formats.append(fmt)
        elif fmt.get('vcodec') != 'none' and fmt.get('acodec') == 'none':
            video_formats.append(fmt)
        elif fmt.get('vcodec') == 'none' and fmt.get('acodec') != 'none':
            audio_formats.append(fmt)
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞
    target_heights = [480, 720, 1080, 1440, 2160, 360, 240, 144]
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    for target in target_heights:
        for fmt in combined_formats:
            height = fmt.get('height', 0)
            if height and abs(height - target) <= 100:  # –¥–æ–ø—É—Å–∫ ¬±100px
                return fmt['format_id']
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ, –∏—â–µ–º —Ä–∞–∑–¥–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ+–∞—É–¥–∏–æ
    selected_video = None
    for target in target_heights:
        for fmt in video_formats:
            height = fmt.get('height', 0)
            if height and abs(height - target) <= 100:
                selected_video = fmt['format_id']
                break
        if selected_video:
            break
    
    # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–µ –∞—É–¥–∏–æ
    best_audio = None
    if audio_formats:
        best_audio = max(audio_formats, key=lambda x: x.get('abr', 0) or 0)['format_id']
    
    if selected_video and best_audio:
        return f"{selected_video}+{best_audio}"
    elif selected_video:
        return selected_video
    
    # Fallback –Ω–∞ –ª—É—á—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
    return 'best'

def download_youtube_video(url):
    import yt_dlp
    output = 'temp_video.mp4'
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        info_opts = {
            'quiet': True,
            'no_warnings': True,
        }
        
        with yt_dlp.YoutubeDL(info_opts) as ydl:
            info = ydl.extract_info(url, download=False)
            formats = info.get('formats', [])
            
            # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Ñ–æ—Ä–º–∞—Ç
            selected_format = select_best_format(formats)
            print(f"–í—ã–±—Ä–∞–Ω —Ñ–æ—Ä–º–∞—Ç: {selected_format}")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
        download_opts = {
            'outtmpl': output,
            'format': selected_format,
            'merge_output_format': 'mp4',
            'quiet': True,
            'no_warnings': True,
            'retries': 3,
            'fragment_retries': 3,
        }
        
        with yt_dlp.YoutubeDL(download_opts) as ydl:
            ydl.download([url])
            return output
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
        return None

if __name__ == "__main__":
    import logging
    import asyncio
    from telegram.error import Conflict
    
    logging.basicConfig(level=logging.INFO)
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')  # —Ç–æ–∫–µ–Ω –±–µ—Ä—ë–º –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ Replit
    
    if not bot_token:
        print("Error: TELEGRAM_BOT_TOKEN environment variable is not set!")
        exit(1)
    
    keep_alive()  # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ Flask
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(bot_token).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        print(f"Exception while handling an update: {context.error}")
        if isinstance(context.error, Conflict):
            print("–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å –¥—Ä—É–≥–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –±–æ—Ç–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...")
            await asyncio.sleep(5)  # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
    
    application.add_error_handler(error_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã –∏ –≥—Ä—É–ø–ø—ã)
    application.add_handler(MessageHandler(
        filters.TEXT & (~filters.COMMAND), 
        handle_message
    ))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    try:
        print("–ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞...")
        application.run_polling(drop_pending_updates=True)
    except Conflict as e:
        print(f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
    except Exception as e:
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
